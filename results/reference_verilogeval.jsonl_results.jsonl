{"task_id": "mux2to1v", "completion": "assign out = (sel == 1'b0) ? a : b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q6b", "completion": "\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w;\n\t\t\t3'b001: Y2 = 1'b0;\n\t\t\t3'b010: Y2 = w;\n\t\t\t3'b011: Y2 = 1'b1;\n\t\t\t3'b100: Y2 = w;\n\t\t\t3'b101: Y2 = 1'b1;\n\t\t\tdefault: Y2 = 1'b0;\n\t\tendcase\n\tend\nendmodule\n", "result": "failed: 30 out of 100 samples.", "passed": false}
{"task_id": "ringer", "completion": "assign ringer = ~vibrate_mode & ring;\nassign motor = vibrate_mode & ring;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "alwaysblock1", "completion": "assign out_assign = a & b;\n\nalways @(*) begin\n\tout_alwaysblock = a & b;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "zero", "completion": "assign zero = 1'b0;\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "circuit7", "completion": "always @(posedge clk) begin\n\tif (a == 1'b1) begin\n\t\tq <= 1'b0;\n\tend else begin\n\t\tq <= 1'b1;\n\tend\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q5a", "completion": "reg [7:0] state;\nreg [7:0] next_state;\nreg [7:0] count;\nreg [7:0] sum;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= 0;\n\t\tcount <= 0;\n\t\tsum <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tcount <= count + 1;\n\t\tsum <= sum + x;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t0: begin\n\t\t\tif (count == 0) begin\n\t\t\t\tnext_state = 1;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 0;\n\t\t\tend\n\t\tend\n\t\t1: begin\n\t\t\tif (count == 8) begin\n\t\t\t\tnext_state = 2;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 1;\n\t\t\tend\n\t\tend\n\t\t2: begin\n\t\t\tnext_state = 0;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 0;\n\t\tend\n\tendcase\nend\n\nassign z = ~sum;\n\nendmodule\n", "result": "failed: 274 out of 436 samples.", "passed": false}
{"task_id": "fsm3", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin // state A\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b01; // state B\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // state A\n\t\tend\n\t\t2'b01: begin // state B\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b01; // state B\n\t\t\telse\n\t\t\t\tnext_state = 2'b10; // state C\n\t\tend\n\t\t2'b10: begin // state C\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b11; // state D\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // state A\n\t\tend\n\t\t2'b11: begin // state D\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b10; // state C\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // state B\n\t\tend\n\tendcase\nend\n\nassign out = (state == 2'b11); // state D\n\nendmodule\n", "result": "failed: 13 out of 230 samples.", "passed": false}
{"task_id": "vector2", "completion": "assign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4c", "completion": "always_ff @(posedge clk) begin\n\tif (r)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "mt2015_q4a", "completion": "assign z = (x ^ y) & x;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "shift18", "completion": "\talways @(posedge clk) begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend\n\t\telse if (ena) begin\n\t\t\tcase (amount)\n\t\t\t\t2'b00: q <= {q[62:0], 1'b0};\n\t\t\t\t2'b01: q <= {q[55:0], 8'b0};\n\t\t\t\t2'b10: q <= {{1{q[63]}}, q[63:1]};\n\t\t\t\t2'b11: q <= {{8{q[63]}}, q[63:8]};\n\t\t\tendcase\n\t\tend\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q8", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or negedge aresetn) begin\n\tif (!aresetn) begin\n\t\tstate <= 2'b00;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin\n\t\t\tif (x == 1'b1) begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t2'b01: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tnext_state = 2'b10;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t2'b10: begin\n\t\t\tif (x == 1'b1) begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 2'b00;\n\t\t\tz = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule\n", "result": "failed: 22 out of 440 samples.", "passed": false}
{"task_id": "m2014_q6", "completion": "reg [2:0] state;\nparameter A = 3'b000, B = 3'b001, C = 3'b010, D = 3'b011, E = 3'b100, F = 3'b101;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= A;\n\tend else begin\n\t\tcase (state)\n\t\t\tA: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= A;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= B;\n\t\t\t\tend\n\t\t\tend\n\t\t\tB: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= D;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= C;\n\t\t\t\tend\n\t\t\tend\n\t\t\tC: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= D;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= E;\n\t\t\t\tend\n\t\t\tend\n\t\t\tD: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= A;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= F;\n\t\t\t\tend\n\t\t\tend\n\t\t\tE: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= D;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= E;\n\t\t\t\tend\n\t\t\tend\n\t\t\tF: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tstate <= D;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= C;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign z = (state == E) || (state == F);\n\nendmodule\n", "result": "failed: 6 out of 200 samples.", "passed": false}
{"task_id": "fsm_ps2data", "completion": "reg [2:0] state;\nreg [2:0] next_state;\nreg [23:0] message;\n\nlocalparam IDLE = 3'b000;\nlocalparam WAIT_FOR_1 = 3'b001;\nlocalparam WAIT_FOR_2 = 3'b010;\nlocalparam WAIT_FOR_3 = 3'b011;\nlocalparam MESSAGE_RECEIVED = 3'b100;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tmessage <= 24'b0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tif (state == MESSAGE_RECEIVED) begin\n\t\t\tmessage <= {message[15:0], in};\n\t\tend\n\t\telse if (state == WAIT_FOR_3) begin\n\t\t\tmessage <= {message[15:0], in};\n\t\tend\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = WAIT_FOR_1;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tWAIT_FOR_1: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = WAIT_FOR_2;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tWAIT_FOR_2: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = WAIT_FOR_3;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tWAIT_FOR_3: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = MESSAGE_RECEIVED;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tMESSAGE_RECEIVED: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\tendcase\nend\n\nassign done = (state == MESSAGE_RECEIVED);\nassign out_bytes = message;\n\nendmodule\n", "result": "failed: 564 out of 1619 samples.", "passed": false}
{"task_id": "2012_q2b", "completion": "assign Y1 = (y == 6'b000001) ? w : 1'b0; // State A\nassign Y3 = (y == 6'b000001) ? 1'b0 : // State A\n            (y == 6'b000010) ? w : 1'b0; // State B\n\nendmodule\n", "result": "failed: 275 out of 600 samples.", "passed": false}
{"task_id": "vector0", "completion": "assign outv = vec;\nassign o2 = vec[2];\nassign o1 = vec[1];\nassign o0 = vec[0];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "kmap4", "completion": "always @(*) begin\n\tcase ({a, b, c, d})\n\t\t4'b0000: out = 0;\n\t\t4'b0001: out = 1;\n\t\t4'b0011: out = 0;\n\t\t4'b0010: out = 1;\n\t\t4'b0111: out = 0;\n\t\t4'b0110: out = 1;\n\t\t4'b0100: out = 0;\n\t\t4'b0101: out = 1;\n\t\t4'b1100: out = 0;\n\t\t4'b1101: out = 1;\n\t\t4'b1111: out = 0;\n\t\t4'b1110: out = 1;\n\t\t4'b1010: out = 0;\n\t\t4'b1011: out = 1;\n\t\t4'b1001: out = 0;\n\t\t4'b1000: out = 1;\n\tendcase\nend\n\nendmodule\n", "result": "failed: 68 out of 232 samples.", "passed": false}
{"task_id": "vector1", "completion": "assign out_hi = in[15:8];\nassign out_lo = in[7:0];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "norgate", "completion": "assign out = ~(a | b);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "alwaysblock2", "completion": "assign out_assign = a ^ b;\n\nalways @(*) begin\n\tout_always_comb = a ^ b;\nend\n\nalways @(posedge clk) begin\n\tout_always_ff <= a ^ b;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q6c", "completion": "assign Y2 = (y[2] & ~w) | (~y[2] & w);\nassign Y4 = (y[4] & ~w) | (~y[4] & w);\n\nendmodule\n", "result": "failed: 361 out of 600 samples.", "passed": false}
{"task_id": "mux256to1", "completion": "assign out = in[sel];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "2014_q4a", "completion": "always @(posedge clk) begin\n\tif (L)\n\t\tQ <= R;\n\telse if (E)\n\t\tQ <= w;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q4", "completion": "reg q1, q2, q3;\n\nwire xor_out, and_out, or_out;\n\n// XOR gate\nassign xor_out = x ^ q1;\n\n// AND gate\nassign and_out = x & ~q2;\n\n// OR gate\nassign or_out = x | ~q3;\n\n// D flip-flops\nalways @(posedge clk) begin\n\tq1 <= xor_out;\n\tq2 <= and_out;\n\tq3 <= or_out;\nend\n\n// XNOR gate\nassign z = ~(q1 ^ q2 ^ q3);\n\nendmodule\n", "result": "failed: 118 out of 118 samples.", "passed": false}
{"task_id": "circuit4", "completion": "assign q = (a & b) | (c & d);\n\nendmodule\n", "result": "failed: 38 out of 121 samples.", "passed": false}
{"task_id": "rule110", "completion": "\talways @(posedge clk) begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend else begin\n\t\t\tq[511:1] <= q[510:0];\n\t\t\tq[0] <= (q[1] & q[0] & q[511]) | (~q[1] & q[0] & ~q[511]) | (~q[1] & ~q[0] & q[511]) | (q[1] & ~q[0] & ~q[511]);\n\t\tend\n\tend\n\nendmodule\n", "result": "failed: 6216 out of 6283 samples.", "passed": false}
{"task_id": "fsm3s", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin // State A\n\t\t\tif (in) begin\n\t\t\t\tnext_state = 2'b01; // Next state B\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 2'b00; // Next state A\n\t\t\tend\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tif (in) begin\n\t\t\t\tnext_state = 2'b01; // Next state B\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 2'b10; // Next state C\n\t\t\tend\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tif (in) begin\n\t\t\t\tnext_state = 2'b11; // Next state D\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 2'b00; // Next state A\n\t\t\tend\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tif (in) begin\n\t\t\t\tnext_state = 2'b10; // Next state C\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = 2'b01; // Next state B\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign out = (state == 2'b11); // Output is 1 when in state D\n\nendmodule\n", "result": "failed: 16 out of 230 samples.", "passed": false}
{"task_id": "circuit5", "completion": "always @(*) begin\n\tcase ({a, b, c, d, e})\n\t\t20'b00000000000000000000: q = 4'b0000;\n\t\t20'b00000000000000000001: q = 4'b0001;\n\t\t20'b00000000000000000010: q = 4'b0010;\n\t\t20'b00000000000000000011: q = 4'b0011;\n\t\t20'b00000000000000000100: q = 4'b0100;\n\t\t20'b00000000000000000101: q = 4'b0101;\n\t\t20'b00000000000000000110: q = 4'b0110;\n\t\t20'b00000000000000000111: q = 4'b0111;\n\t\t20'b00000000000000001000: q = 4'b1000;\n\t\t20'b00000000000000001001: q = 4'b1001;\n\t\t20'b00000000000000001010: q = 4'b1010;\n\t\t20'b00000000000000001011: q = 4'b1011;\n\t\t20'b00000000000000001100: q = 4'b1100;\n\t\t20'b00000000000000001101: q = 4'b1101;\n\t\t20'b00000000000000001110: q = 4'b1110;\n\t\t20'b00000000000000001111: q = 4'b1111;\n\t\t20'b00000000000000010000: q = 4'b0000;\n\t\t20'b00000000000000010001: q = 4'b0001;\n\t\t20'b00000000000000010010: q = 4'b0010;\n\t\t20'b00000000000000010011: q = 4'b0011;\n\t\t20'b00000000000000010100: q = 4'b0100;\n\t\t20'b00000000000000010101: q = 4'b0101;\n\t\t20'b00000000000000010110: q = 4'b0110;\n\t\t20'b00000000000000010111: q = 4'b0111;\n\t\t20'b00000000000000011000: q = 4'b1000;\n\t\t20'b00000000000000011001: q = 4'b1001;\n\t\t20'b00000000000000011010: q = 4'b1010;\n\t\t20'b00000000000000011011: q = 4'b1011;\n\t\t20'b00000000000000011100: q = 4'b1100;\n\t\t20'b00000000000000011101: q = 4'b1101;\n\t\t20'b00000000000000011110: q = 4'b1110;\n\t\t20'b00000000000000011111: q = 4'b1111;\n\t\tdefault: q = 4'b0000;\n\tendcase\nend\n\nendmodule\n", "result": "failed: 135 out of 141 samples.", "passed": false}
{"task_id": "bugs_mux2", "completion": "always @(*) begin\n\tout = (~sel) ? a : b;\nend\n\nendmodule\n", "result": "failed: 111 out of 114 samples.", "passed": false}
{"task_id": "mt2015_muxdff", "completion": "\talways @(posedge clk) begin\n\t\tif (L) begin\n\t\t\tQ <= r_in;\n\t\tend else begin\n\t\t\tQ <= q_in;\n\t\tend\n\tend\n\nendmodule\n", "result": "failed: 1 out of 199 samples.", "passed": false}
{"task_id": "edgecapture", "completion": "\treg [31:0] in_d1;\n\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tin_d1 <= 0;\n\t\t\tout <= 0;\n\t\tend\n\t\telse begin\n\t\t\tin_d1 <= in;\n\t\t\tout <= (in_d1 & ~in);\n\t\tend\n\tend\n\nendmodule\n", "result": "failed: 225 out of 266 samples.", "passed": false}
{"task_id": "dff8", "completion": "\talways @(posedge clk) begin\n\t\tq <= d;\n\tend\nendmodule\n", "result": "failed: 1 out of 41 samples.", "passed": false}
{"task_id": "ece241_2014_q1c", "completion": "wire [8:0] sum;\n\nassign sum = {a[7], a} + {b[7], b};\nassign s = sum[7:0];\nassign overflow = sum[8] ^ sum[7];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "review2015_fsmonehot", "completion": "    // Next-state logic\n    assign B3_next = (state[8] & ~d) | (state[8] & d);\n    assign S_next = (state[0] & ~d) | (state[0] & d);\n    assign S1_next = (state[1] & ~d) | (state[1] & d);\n    assign Count_next = (state[8] & ~done_counting) | (state[8] & done_counting);\n    assign Wait_next = (state[9] & ~ack) | (state[9] & ack);\n\n    // Output logic\n    assign done = state[9];\n    assign counting = state[8];\n    assign shift_ena = state[8] | state[9];\n\nendmodule\n", "result": "failed: 3083 out of 3303 samples.", "passed": false}
{"task_id": "counter_2bc", "completion": "always_ff @(posedge clk, posedge areset) begin\n    if (areset) begin\n        state <= 2'b01;\n    end\n    else if (train_valid) begin\n        if (train_taken) begin\n            if (state != 2'b11) begin\n                state <= state + 1;\n            end\n        end\n        else begin\n            if (state != 2'b00) begin\n                state <= state - 1;\n            end\n        end\n    end\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_casez", "completion": "always @(*) begin\n\tif (in[0]) pos = 3'd0;\n\telse if (in[1]) pos = 3'd1;\n\telse if (in[2]) pos = 3'd2;\n\telse if (in[3]) pos = 3'd3;\n\telse if (in[4]) pos = 3'd4;\n\telse if (in[5]) pos = 3'd5;\n\telse if (in[6]) pos = 3'd6;\n\telse if (in[7]) pos = 3'd7;\n\telse pos = 3'd0;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_nolatches", "completion": "always @(*) begin\n\tcase (scancode)\n\t\t16'he06b: begin\n\t\t\tleft = 1'b1;\n\t\t\tdown = 1'b0;\n\t\t\tright = 1'b0;\n\t\t\tup = 1'b0;\n\t\tend\n\t\t16'he072: begin\n\t\t\tleft = 1'b0;\n\t\t\tdown = 1'b1;\n\t\t\tright = 1'b0;\n\t\t\tup = 1'b0;\n\t\tend\n\t\t16'he074: begin\n\t\t\tleft = 1'b0;\n\t\t\tdown = 1'b0;\n\t\t\tright = 1'b1;\n\t\t\tup = 1'b0;\n\t\tend\n\t\t16'he075: begin\n\t\t\tleft = 1'b0;\n\t\t\tdown = 1'b0;\n\t\t\tright = 1'b0;\n\t\t\tup = 1'b1;\n\t\tend\n\t\tdefault: begin\n\t\t\tleft = 1'b0;\n\t\t\tdown = 1'b0;\n\t\t\tright = 1'b0;\n\t\t\tup = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4j", "completion": "wire c1, c2, c3;\n\nassign sum[0] = x[0] ^ y[0];\nassign c1 = x[0] & y[0];\n\nassign sum[1] = (x[1] ^ y[1]) ^ c1;\nassign c2 = (x[1] & y[1]) | (x[1] & c1) | (y[1] & c1);\n\nassign sum[2] = (x[2] ^ y[2]) ^ c2;\nassign c3 = (x[2] & y[2]) | (x[2] & c2) | (y[2] & c2);\n\nassign sum[3] = (x[3] ^ y[3]) ^ c3;\nassign sum[4] = (x[3] & y[3]) | (x[3] & c3) | (y[3] & c3);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "history_shift", "completion": "logic [31:0] history;\n\nalways_ff @(posedge clk or posedge areset) begin\n    if (areset) begin\n        history <= 32'b0;\n    end\n    else begin\n        if (predict_valid) begin\n            history <= {history[30:0], predict_taken};\n        end\n        else if (train_mispredicted) begin\n            history <= {train_history[31:1], train_taken};\n        end\n    end\nend\n\nassign predict_history = history;\n\nendmodule\n", "result": "failed: 1818 out of 2055 samples.", "passed": false}
{"task_id": "wire_decl", "completion": "\twire and_out1, and_out2, or_out;\n\n\tassign and_out1 = a & b;\n\tassign and_out2 = c & d;\n\tassign or_out = and_out1 | and_out2;\n\n\tassign out = or_out;\n\tassign out_n = ~or_out;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "dff", "completion": "\talways @(posedge clk) begin\n\t\tq <= d;\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q12", "completion": "\t// 8-bit shift register\n\treg [7:0] Q;\n\n\talways @(posedge clk) begin\n\t\tif (enable) begin\n\t\t\tQ <= {Q[6:0], S};\n\t\tend\n\tend\n\n\t// 3-to-1 multiplexer\n\talways @(*) begin\n\t\tcase ({A, B, C})\n\t\t\t3'b000: Z = Q[0];\n\t\t\t3'b001: Z = Q[1];\n\t\t\t3'b010: Z = Q[2];\n\t\t\t3'b011: Z = Q[3];\n\t\t\t3'b100: Z = Q[4];\n\t\t\t3'b101: Z = Q[5];\n\t\t\t3'b110: Z = Q[6];\n\t\t\t3'b111: Z = Q[7];\n\t\t\tdefault: Z = 1'b0;\n\t\tendcase\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "thermostat", "completion": "assign heater = mode & too_cold & ~aircon;\nassign aircon = ~mode & too_hot & ~heater;\nassign fan = heater | aircon | fan_on;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2013_q2", "completion": "wire [3:0] inputs = {a, b, c, d};\n\n// Sum-of-Products (SOP) form\nassign out_sop = (inputs == 4'b0010) | (inputs == 4'b0111) | (inputs == 4'b1111);\n\n// Product-of-Sums (POS) form\nassign out_pos = ~((inputs == 4'b0000) | (inputs == 4'b0001) | (inputs == 4'b0100) | (inputs == 4'b0101) | (inputs == 4'b0110) | (inputs == 4'b1001) | (inputs == 4'b1010) | (inputs == 4'b1101) | (inputs == 4'b1110));\n\nendmodule\n", "result": "failed: 17 out of 107 samples.", "passed": false}
{"task_id": "lfsr32", "completion": "\treg [31:0] lfsr;\n\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tlfsr <= 32'h1;\n\t\tend else begin\n\t\t\tlfsr[31:1] <= lfsr[30:0];\n\t\t\tlfsr[0] <= lfsr[31] ^ lfsr[21] ^ lfsr[1] ^ lfsr[0];\n\t\tend\n\t\tq <= lfsr;\n\tend\n\nendmodule\n", "result": "failed: 400370 out of 400411 samples.", "passed": false}
{"task_id": "circuit3", "completion": "assign q = (a & b) | (c & d);\n\nendmodule\n", "result": "failed: 49 out of 121 samples.", "passed": false}
{"task_id": "7420", "completion": "// Implement the 2 NAND gates\nassign p1y = ~(p1a & p1b & p1c & p1d);\nassign p2y = ~(p2a & p2b & p2c & p2d);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "popcount255", "completion": "always @(*) begin\n\tout = 0;\n\tfor (int i = 0; i < 255; i++) begin\n\t\tout += in[i];\n\tend\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "gatesv", "completion": "assign out_both[0] = in[0] & in[1];\nassign out_both[1] = in[1] & in[2];\nassign out_both[2] = in[2] & in[3];\n\nassign out_any[1] = in[1] | in[0];\nassign out_any[2] = in[2] | in[1];\nassign out_any[3] = in[3] | in[2];\n\nassign out_different[0] = in[0] ^ in[3];\nassign out_different[1] = in[1] ^ in[0];\nassign out_different[2] = in[2] ^ in[1];\nassign out_different[3] = in[3] ^ in[2];\n\nendmodule\n", "result": "failed: 160 out of 213 samples.", "passed": false}
{"task_id": "circuit6", "completion": "always @(*) begin\n\tcase (a)\n\t\t3'b000: q = 16'h1232;\n\t\t3'b001: q = 16'haee0;\n\t\t3'b010: q = 16'h27d4;\n\t\t3'b011: q = 16'h5a0e;\n\t\t3'b100: q = 16'h2066;\n\t\t3'b101: q = 16'h64ce;\n\t\t3'b110: q = 16'hc526;\n\t\t3'b111: q = 16'h2f19;\n\t\tdefault: q = 16'h0000;\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "countslow", "completion": "\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tq <= 4'b0000;\n\t\tend\n\t\telse if (slowena) begin\n\t\t\tq <= (q == 4'b1001) ? 4'b0000 : q + 1;\n\t\tend\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4f", "completion": "\tlogic in2_b;\n\n\tassign in2_b = ~in2;\n\n\tassign out = in1 & in2_b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4h", "completion": "assign out = in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm1", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b10;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b00;\n\t\t\telse\n\t\t\t\tnext_state = 2'b10;\n\t\tend\n\t\t2'b01: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b01;\n\t\t\telse\n\t\t\t\tnext_state = 2'b00;\n\t\tend\n\t\t2'b10: begin\n\t\t\tif (in)\n\t\t\t\tnext_state = 2'b10;\n\t\t\telse\n\t\t\t\tnext_state = 2'b01;\n\t\tend\n\t\tdefault:\n\t\t\tnext_state = 2'b10;\n\tendcase\nend\n\nassign out = (state == 2'b10);\n\nendmodule\n", "result": "failed: 68 out of 228 samples.", "passed": false}
{"task_id": "dualedge", "completion": "\treg clk_dff;\n\n\talways @(posedge clk or negedge clk) begin\n\t\tclk_dff <= clk;\n\tend\n\n\talways @(posedge clk_dff or negedge clk_dff) begin\n\t\tq <= d;\n\tend\n\nendmodule\n", "result": "failed: 93 out of 224 samples.", "passed": false}
{"task_id": "xnorgate", "completion": "assign out = ~(a ^ b);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "mt2015_q4", "completion": "\t// Instantiate the A submodule\n\twire a_out;\n\tassign a_out = (x ^ y) & x;\n\n\t// Instantiate the B submodule\n\twire b_out;\n\treg b_x, b_y;\n\talways @(x, y) begin\n\t\tb_x = x;\n\t\tb_y = y;\n\tend\n\tassign b_out = (b_x == 0 && b_y == 0) ? 1 : 0;\n\n\t// Connect the submodules to the top-level\n\twire or_out, and_out;\n\tassign or_out = a_out | b_out;\n\tassign and_out = a_out & b_out;\n\tassign z = or_out ^ and_out;\n\nendmodule\n", "result": "failed: 44 out of 200 samples.", "passed": false}
{"task_id": "rotate100", "completion": "\talways @(posedge clk) begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend\n\t\telse begin\n\t\t\tcase (ena)\n\t\t\t\t2'b01: q <= {q[0], q[99:1]}; // Rotate right by one bit\n\t\t\t\t2'b10: q <= {q[98:0], q[99]}; // Rotate left by one bit\n\t\t\t\tdefault: q <= q; // Do not rotate\n\t\t\tendcase\n\t\tend\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "review2015_count1k", "completion": "\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tq <= 10'b0;\n\t\tend\n\t\telse begin\n\t\t\tq <= (q == 10'd999) ? 10'b0 : q + 1'b1;\n\t\tend\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "notgate", "completion": "assign out = ~in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm_onehot", "completion": "\t// Next state logic\n\tassign next_state[0] = (state[0] & ~in) | (state[1] & in);\n\tassign next_state[1] = (state[1] & ~in) | (state[2] & in);\n\tassign next_state[2] = (state[2] & ~in) | (state[3] & in);\n\tassign next_state[3] = (state[3] & ~in) | (state[4] & in);\n\tassign next_state[4] = (state[4] & ~in) | (state[5] & in);\n\tassign next_state[5] = (state[5] & ~in) | (state[6] & in);\n\tassign next_state[6] = (state[6] & ~in) | (state[7] & in);\n\tassign next_state[7] = (state[7] & ~in) | (state[7] & in);\n\tassign next_state[8] = (state[8] & ~in) | (state[1] & in);\n\tassign next_state[9] = (state[9] & ~in) | (state[1] & in);\n\n\t// Output logic\n\tassign out1 = (state[7] & ~in) | (state[8] & ~in) | (state[9] & ~in);\n\tassign out2 = (state[7] & in) | (state[8] & in) | (state[9] & in);\n\nendmodule\n", "result": "failed: 1411 out of 1424 samples.", "passed": false}
{"task_id": "ece241_2013_q7", "completion": "always @(posedge clk) begin\n\tcase ({j, k})\n\t\t2'b00: Q <= Q;\n\t\t2'b01: Q <= 1'b0;\n\t\t2'b10: Q <= 1'b1;\n\t\t2'b11: Q <= ~Q;\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "popcount3", "completion": "assign out = in[0] + in[1] + in[2];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "vector5", "completion": "assign out[24] = ~a ^ a;\nassign out[23] = ~a ^ b;\nassign out[22] = ~a ^ c;\nassign out[21] = ~a ^ d;\nassign out[20] = ~a ^ e;\nassign out[19] = ~b ^ a;\nassign out[18] = ~b ^ b;\nassign out[17] = ~b ^ c;\nassign out[16] = ~b ^ d;\nassign out[15] = ~b ^ e;\nassign out[14] = ~c ^ a;\nassign out[13] = ~c ^ b;\nassign out[12] = ~c ^ c;\nassign out[11] = ~c ^ d;\nassign out[10] = ~c ^ e;\nassign out[9] = ~d ^ a;\nassign out[8] = ~d ^ b;\nassign out[7] = ~d ^ c;\nassign out[6] = ~d ^ d;\nassign out[5] = ~d ^ e;\nassign out[4] = ~e ^ a;\nassign out[3] = ~e ^ b;\nassign out[2] = ~e ^ c;\nassign out[1] = ~e ^ d;\nassign out[0] = ~e ^ e;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "lemmings1", "completion": "reg state;\nparameter LEFT = 1'b0, RIGHT = 1'b1;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= LEFT;\n\tend\n\telse begin\n\t\tif (bump_left && !bump_right) begin\n\t\t\tstate <= RIGHT;\n\t\tend\n\t\telse if (!bump_left && bump_right) begin\n\t\t\tstate <= LEFT;\n\t\tend\n\tend\nend\n\nassign walk_left = (state == LEFT);\nassign walk_right = (state == RIGHT);\n\nendmodule\n", "result": "failed: 22 out of 229 samples.", "passed": false}
{"task_id": "circuit1", "completion": "assign q = (a & b) | (~a & ~b);\n\nendmodule\n", "result": "failed: 25 out of 120 samples.", "passed": false}
{"task_id": "7458", "completion": "wire and1, and2, and3, and4;\n\nassign and1 = p1a & p1b & p1c;\nassign and2 = p1d & p1e & p1f;\nassign p1y = and1 | and2;\n\nassign and3 = p2a & p2b;\nassign and4 = p2c & p2d;\nassign p2y = and3 | and4;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "2014_q3c", "completion": "always @(posedge clk) begin\n\tcase (y)\n\t\t3'b000: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b001: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tY0 = 1'b1;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b010: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend\n\t\tend\n\t\t3'b011: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b0;\n\t\t\tend else begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b1;\n\t\t\tend\n\t\tend\n\t\t3'b100: begin\n\t\t\tif (x == 1'b0) begin\n\t\t\t\tY0 = 1'b1;\n\t\t\t\tz = 1'b1;\n\t\t\tend else begin\n\t\t\t\tY0 = 1'b0;\n\t\t\t\tz = 1'b1;\n\t\t\tend\n\t\tend\n\t\tdefault: begin\n\t\t\tY0 = 1'b0;\n\t\t\tz = 1'b0;\n\t\tend\n\tendcase\nend\n\nendmodule\n", "result": "failed: 77 out of 200 samples.", "passed": false}
{"task_id": "m2014_q4e", "completion": "assign out = ~(in1 | in2);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "wire4", "completion": "\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4b", "completion": "always_ff @(posedge clk, posedge ar) begin\n\tif (ar)\n\t\tq <= 1'b0;\n\telse\n\t\tq <= d;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_case", "completion": "always @(*) begin\n\tcase (sel)\n\t\t3'd0: out = data0;\n\t\t3'd1: out = data1;\n\t\t3'd2: out = data2;\n\t\t3'd3: out = data3;\n\t\t3'd4: out = data4;\n\t\t3'd5: out = data5;\n\t\tdefault: out = 4'b0000;\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "timer", "completion": "reg [9:0] counter;\n\nalways @(posedge clk) begin\n\tif (load) begin\n\t\tcounter <= data;\n\tend else if (counter != 0) begin\n\t\tcounter <= counter - 1;\n\tend\nend\n\nassign tc = (counter == 0);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "review2015_fsmseq", "completion": "\treg [3:0] state;\n\treg [3:0] next_state;\n\treg [3:0] shift_reg;\n\n\tlocalparam IDLE = 4'b0000;\n\tlocalparam FOUND = 4'b0001;\n\tlocalparam SHIFT = 4'b0010;\n\tlocalparam MATCH1 = 4'b0011;\n\tlocalparam MATCH2 = 4'b0100;\n\tlocalparam MATCH3 = 4'b0101;\n\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tstate <= IDLE;\n\t\t\tshift_reg <= 4'b0000;\n\t\tend else begin\n\t\t\tstate <= next_state;\n\t\t\tshift_reg <= {shift_reg[2:0], data};\n\t\tend\n\tend\n\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tIDLE: begin\n\t\t\t\tif (data == 1'b1) begin\n\t\t\t\t\tnext_state = SHIFT;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tSHIFT: begin\n\t\t\t\tif (shift_reg == 4'b1101) begin\n\t\t\t\t\tnext_state = FOUND;\n\t\t\t\tend else if (data == 1'b1) begin\n\t\t\t\t\tnext_state = MATCH1;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tMATCH1: begin\n\t\t\t\tif (data == 1'b0) begin\n\t\t\t\t\tnext_state = MATCH2;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tMATCH2: begin\n\t\t\t\tif (data == 1'b1) begin\n\t\t\t\t\tnext_state = MATCH3;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tMATCH3: begin\n\t\t\t\tif (data == 1'b0) begin\n\t\t\t\t\tnext_state = SHIFT;\n\t\t\t\tend else begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFOUND: begin\n\t\t\t\tnext_state = FOUND;\n\t\t\tend\n\t\t\tdefault: begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tendcase\n\tend\n\n\tassign start_shifting = (state == FOUND);\n\nendmodule\n", "result": "failed: 202 out of 643 samples.", "passed": false}
{"task_id": "dff8r", "completion": "\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\tq <= d;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "edgedetect2", "completion": "\treg [7:0] in_d1;\n\n\talways @(posedge clk) begin\n\t\tin_d1 <= in;\n\t\tanyedge <= in ^ in_d1;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "count1to10", "completion": "\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tq <= 4'd1;\n\t\tend\n\t\telse if (q == 4'd10) begin\n\t\t\tq <= 4'd1;\n\t\tend\n\t\telse begin\n\t\t\tq <= q + 1;\n\t\tend\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "circuit9", "completion": "always @(posedge clk) begin\n\tif (a) begin\n\t\tq <= q + 1;\n\tend else begin\n\t\tq <= 0;\n\tend\nend\n\nendmodule\n", "result": "failed: 212 out of 245 samples.", "passed": false}
{"task_id": "lfsr5", "completion": "\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tq <= 5'b1;\n\t\tend else begin\n\t\t\tq[4:1] <= q[3:0];\n\t\t\tq[0] <= q[4] ^ q[3];\n\t\tend\n\tend\n\nendmodule\n", "result": "failed: 4286 out of 4443 samples.", "passed": false}
{"task_id": "bugs_addsubz", "completion": "\talways @(*) begin\n\t\tcase (do_sub)\n\t\t\t0: out = a + b;\n\t\t\t1: out = a - b;\n\t\tendcase\n\n\t\tif (out == 8'b0)\n\t\t\tresult_is_zero = 1;\n\t\telse\n\t\t\tresult_is_zero = 0;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q3", "completion": "always_comb begin\n\tcase ({x[4:3], x[2:1]})\n\t\t4'b0000, 4'b0001, 4'b0011, 4'b0100: f = 1'b0;\n\t\t4'b0010: f = 1'b1;\n\t\t4'b0101, 4'b0110, 4'b1100, 4'b1101: f = 1'b0;\n\t\t4'b0111, 4'b1000, 4'b1001, 4'b1011: f = 1'b1;\n\t\t4'b1010: f = 1'b0;\n\t\tdefault: f = 1'bx;\n\tendcase\nend\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
{"task_id": "bugs_case", "completion": "always @(*) begin\n\tcase (code)\n\t\t8'h45: begin\n\t\t\tout = 0;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h16: begin\n\t\t\tout = 1;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h1e: begin\n\t\t\tout = 2;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h26: begin\n\t\t\tout = 3;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h25: begin\n\t\t\tout = 4;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h2e: begin\n\t\t\tout = 5;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h36: begin\n\t\t\tout = 6;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h3d: begin\n\t\t\tout = 7;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h3e: begin\n\t\t\tout = 8;\n\t\t\tvalid = 1;\n\t\tend\n\t\t8'h46: begin\n\t\t\tout = 9;\n\t\t\tvalid = 1;\n\t\tend\n\t\tdefault: begin\n\t\t\tout = 0;\n\t\t\tvalid = 0;\n\t\tend\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "vectorr", "completion": "assign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "kmap3", "completion": "always @(*) begin\n\tcase ({a, b, c, d})\n\t\t4'b0000: out = d;\n\t\t4'b0001: out = 0;\n\t\t4'b0010: out = d;\n\t\t4'b0011: out = d;\n\t\t4'b0100: out = 0;\n\t\t4'b0101: out = 0;\n\t\t4'b0110: out = 1;\n\t\t4'b0111: out = 1;\n\t\t4'b1100: out = 0;\n\t\t4'b1101: out = 1;\n\t\t4'b1110: out = 1;\n\t\t4'b1111: out = 1;\n\tendcase\nend\n\nendmodule\n", "result": "failed: 78 out of 232 samples.", "passed": false}
{"task_id": "review2015_shiftcount", "completion": "\talways @(posedge clk) begin\n\t\tif (shift_ena) begin\n\t\t\tq <= {q[2:0], data};\n\t\tend\n\t\telse if (count_ena) begin\n\t\t\tq <= q - 1;\n\t\tend\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "wire", "completion": "assign out = in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "review2015_fsmshift", "completion": "reg [1:0] state;\nreg [1:0] next_state;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= 2'b00;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin\n\t\t\tif (condition) begin\n\t\t\t\tnext_state = 2'b01;\n\t\t\tend else begin\n\t\t\t\tnext_state = 2'b00;\n\t\t\tend\n\t\tend\n\t\t2'b01: begin\n\t\t\tnext_state = 2'b10;\n\t\tend\n\t\t2'b10: begin\n\t\t\tnext_state = 2'b11;\n\t\tend\n\t\t2'b11: begin\n\t\t\tnext_state = 2'b00;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 2'b00;\n\t\tend\n\tendcase\nend\n\nassign shift_ena = (state == 2'b00) ? 1'b1 : 1'b0;\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
{"task_id": "count15", "completion": "\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 4'b0000;\n\t\telse\n\t\t\tq <= q + 1'b1;\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_if", "completion": "\t// Using assign statements\n\tassign out_assign = (sel_b1 && sel_b2) ? b : a;\n\n\t// Using procedural if statement\n\talways @(*) begin\n\t\tif (sel_b1 && sel_b2)\n\t\t\tout_always = b;\n\t\telse\n\t\t\tout_always = a;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "kmap1", "completion": "assign out = (a & ~b & ~c) | (a & b & c) | (a & b & ~c) | (a & ~b & c);\n\nendmodule\n", "result": "failed: 86 out of 219 samples.", "passed": false}
{"task_id": "2013_q2afsm", "completion": "reg [2:0] state, next_state;\n\n// State table\nalways @(*) begin\n\tcase (state)\n\t\t3'b000: begin // State A\n\t\t\tif (r[1]) next_state = 3'b001; // Transition to state B\n\t\t\telse if (r[2]) next_state = 3'b010; // Transition to state C\n\t\t\telse if (r[3]) next_state = 3'b011; // Transition to state D\n\t\t\telse next_state = 3'b000; // Remain in state A\n\t\tend\n\t\t3'b001: begin // State B\n\t\t\tif (r[1]) next_state = 3'b001; // Remain in state B\n\t\t\telse next_state = 3'b000; // Transition to state A\n\t\tend\n\t\t3'b010: begin // State C\n\t\t\tif (r[2]) next_state = 3'b010; // Remain in state C\n\t\t\telse next_state = 3'b000; // Transition to state A\n\t\tend\n\t\t3'b011: begin // State D\n\t\t\tnext_state = 3'b000; // Transition to state A\n\t\tend\n\t\tdefault: next_state = 3'b000; // Default to state A\n\tendcase\nend\n\n// State flip-flops\nalways @(posedge clk or negedge resetn) begin\n\tif (!resetn) state <= 3'b000; // Reset to state A\n\telse state <= next_state;\nend\n\n// Output logic\nassign g[1] = (state == 3'b001); // Grant to device 1\nassign g[2] = (state == 3'b010); // Grant to device 2\nassign g[3] = (state == 3'b011); // Grant to device 3\n\nendmodule\n", "result": "failed: 60 out of 1054 samples.", "passed": false}
{"task_id": "count10", "completion": "\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 4'b0000;\n\t\telse if (q == 4'b1001)\n\t\t\tq <= 4'b0000;\n\t\telse\n\t\t\tq <= q + 1;\n\tend\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm_ps2", "completion": "reg [1:0] state;\nreg [1:0] next_state;\nreg [1:0] byte_count;\n\nlocalparam IDLE = 2'b00;\nlocalparam WAIT_FOR_START = 2'b01;\nlocalparam RECEIVE_MESSAGE = 2'b10;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tbyte_count <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tif (state == RECEIVE_MESSAGE) begin\n\t\t\tbyte_count <= byte_count + 1;\n\t\tend\n\t\telse begin\n\t\t\tbyte_count <= 0;\n\t\tend\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = WAIT_FOR_START;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tWAIT_FOR_START: begin\n\t\t\tif (in[3]) begin\n\t\t\t\tnext_state = RECEIVE_MESSAGE;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = WAIT_FOR_START;\n\t\t\tend\n\t\tend\n\t\tRECEIVE_MESSAGE: begin\n\t\t\tif (byte_count == 2) begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = RECEIVE_MESSAGE;\n\t\t\tend\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\tendcase\nend\n\nassign done = (state == RECEIVE_MESSAGE) && (byte_count == 2);\n\nendmodule\n", "result": "failed: 92 out of 400 samples.", "passed": false}
{"task_id": "mux2to1", "completion": "assign out = (sel == 1'b0) ? a : b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "gates4", "completion": "assign out_and = &in;\nassign out_or = |in;\nassign out_xor = ^in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "2014_q3bfsm", "completion": "reg [2:0] y;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\ty <= 3'b000;\n\tend\n\telse begin\n\t\tcase (y)\n\t\t\t3'b000: begin\n\t\t\t\ty <= (x == 1'b0) ? 3'b000 : 3'b001;\n\t\t\t\tz <= 1'b0;\n\t\t\tend\n\t\t\t3'b001: begin\n\t\t\t\ty <= (x == 1'b0) ? 3'b001 : 3'b100;\n\t\t\t\tz <= 1'b0;\n\t\t\tend\n\t\t\t3'b010: begin\n\t\t\t\ty <= (x == 1'b0) ? 3'b010 : 3'b001;\n\t\t\t\tz <= 1'b0;\n\t\t\tend\n\t\t\t3'b011: begin\n\t\t\t\ty <= (x == 1'b0) ? 3'b001 : 3'b010;\n\t\t\t\tz <= 1'b1;\n\t\t\tend\n\t\t\t3'b100: begin\n\t\t\t\ty <= (x == 1'b0) ? 3'b011 : 3'b100;\n\t\t\t\tz <= 1'b1;\n\t\t\tend\n\t\t\tdefault: begin\n\t\t\t\ty <= 3'b000;\n\t\t\t\tz <= 1'b0;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule\n", "result": "failed: 319 out of 1006 samples.", "passed": false}
{"task_id": "2013_q2bfsm", "completion": "reg [1:0] state;\nreg [1:0] next_state;\nreg [1:0] x_count;\nreg [1:0] y_count;\n\nlocalparam A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk or negedge resetn) begin\n\tif (!resetn) begin\n\t\tstate <= A;\n\t\tx_count <= 0;\n\t\ty_count <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tx_count <= (x_count == 2'd2) ? 0 : x_count + 1;\n\t\ty_count <= (y_count == 2'd2) ? 0 : y_count + 1;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tA: begin\n\t\t\tnext_state = B;\n\t\tend\n\t\tB: begin\n\t\t\tif (x_count == 2'd2) begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = B;\n\t\t\tend\n\t\tend\n\t\tC: begin\n\t\t\tif (y == 1'b1) begin\n\t\t\t\tnext_state = D;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = C;\n\t\t\tend\n\t\tend\n\t\tD: begin\n\t\t\tnext_state = D;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = A;\n\t\tend\n\tendcase\nend\n\nassign f = (state == B) ? 1'b1 : 1'b0;\nassign g = (state == D) ? 1'b1 : 1'b0;\n\nendmodule\n", "result": "failed: 422 out of 1002 samples.", "passed": false}
{"task_id": "dff8p", "completion": "\talways @(negedge clk) begin\n\t\tif (reset)\n\t\t\tq <= 8'h34;\n\t\telse\n\t\t\tq <= d;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "reduction", "completion": "assign parity = ^in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm3comb", "completion": "always @(*) begin\n\tcase (state)\n\t\t2'b00: begin // State A\n\t\t\tnext_state = in ? 2'b01 : 2'b00; // Next state in=1: B, Next state in=0: A\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tnext_state = in ? 2'b01 : 2'b00; // Next state in=1: B, Next state in=0: A\n\t\tend\n\t\t2'b10: begin // State C\n\t\t\tnext_state = in ? 2'b11 : 2'b00; // Next state in=1: B, Next state in=0: A\n\t\tend\n\t\t2'b11: begin // State D\n\t\t\tnext_state = in ? 2'b01 : 2'b00; // Next state in=1: B, Next state in=0: A\n\t\tend\n\tendcase\nend\n\nassign out = (state == 2'b11) ? 1'b1 : 1'b0; // Output is 1 when in state D\n\nendmodule\n", "result": "failed: 18 out of 100 samples.", "passed": false}
{"task_id": "mt2015_q4b", "completion": "reg z_reg;\n\nalways @(x, y) begin\n\tif (x == 1 && y == 1) begin\n\t\tz_reg <= 1;\n\tend else begin\n\t\tz_reg <= 0;\n\tend\nend\n\nassign z = z_reg;\n\nendmodule\n", "result": "failed: 21 out of 110 samples.", "passed": false}
{"task_id": "2012_q2fsm", "completion": "\t// State definitions\n\tparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11, E = 3'b100, F = 3'b101;\n\n\t// State register\n\treg [2:0] state, next_state;\n\n\t// State table\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tA: next_state = w ? B : A;\n\t\t\tB: next_state = w ? C : D;\n\t\t\tC: next_state = w ? E : D;\n\t\t\tD: next_state = w ? F : A;\n\t\t\tE: next_state = w ? E : D;\n\t\t\tF: next_state = w ? C : D;\n\t\t\tdefault: next_state = A;\n\t\tendcase\n\tend\n\n\t// State flip-flops\n\talways @(posedge clk) begin\n\t\tif (reset)\n\t\t\tstate <= A;\n\t\telse\n\t\t\tstate <= next_state;\n\tend\n\n\t// Output logic\n\tassign z = (state == E) || (state == F);\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "dff16e", "completion": "\talways @(posedge clk) begin\n\t\tif (!resetn) begin\n\t\t\tq <= 16'b0;\n\t\tend else begin\n\t\t\tif (byteena[1]) begin\n\t\t\t\tq[15:8] <= d[15:8];\n\t\t\tend\n\t\t\tif (byteena[0]) begin\n\t\t\t\tq[7:0] <= d[7:0];\n\t\t\tend\n\t\tend\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "edgedetect", "completion": "\treg [7:0] in_d1;\n\n\talways @(posedge clk) begin\n\t\tin_d1 <= in;\n\t\tpedge <= (in & ~in_d1);\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "circuit8", "completion": "reg [1:0] state;\n\nalways @(posedge clock) begin\n\tcase (state)\n\t\t2'b00: begin\n\t\t\tif (a) begin\n\t\t\t\tstate <= 2'b01;\n\t\t\t\tp <= 1'b0;\n\t\t\t\tq <= 1'b0;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tstate <= 2'b00;\n\t\t\t\tp <= 1'bx;\n\t\t\t\tq <= 1'bx;\n\t\t\tend\n\t\tend\n\t\t2'b01: begin\n\t\t\tstate <= 2'b10;\n\t\t\tp <= 1'b0;\n\t\t\tq <= 1'b0;\n\t\tend\n\t\t2'b10: begin\n\t\t\tstate <= 2'b11;\n\t\t\tp <= 1'b1;\n\t\t\tq <= 1'b1;\n\t\tend\n\t\t2'b11: begin\n\t\t\tif (a) begin\n\t\t\t\tstate <= 2'b00;\n\t\t\t\tp <= 1'b0;\n\t\t\t\tq <= 1'b0;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tstate <= 2'b11;\n\t\t\t\tp <= 1'b0;\n\t\t\t\tq <= 1'b1;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nendmodule\n", "result": "failed: 235 out of 240 samples.", "passed": false}
{"task_id": "rule90", "completion": "\talways @(posedge clk) begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend else begin\n\t\t\tq[511:1] <= q[510:0];\n\t\t\tq[0] <= q[511] ^ q[0] ^ q[1];\n\t\tend\n\tend\n\nendmodule\n", "result": "failed: 7056 out of 7121 samples.", "passed": false}
{"task_id": "mt2015_eq2", "completion": "\tassign z = (A == B) ? 1'b1 : 1'b0;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "gatesv100", "completion": "genvar i;\ngenerate\n\tfor (i = 0; i < 99; i = i + 1) begin : gen_out_both\n\t\tassign out_both[i] = in[i] & in[i+1];\n\tend\nendgenerate\n\nassign out_any[99] = in[99];\ngenvar j;\ngenerate\n\tfor (j = 1; j < 100; j = j + 1) begin : gen_out_any\n\t\tassign out_any[j-1] = in[j-1] | in[j];\n\tend\nendgenerate\n\nassign out_different[0] = in[0] ^ in[99];\ngenvar k;\ngenerate\n\tfor (k = 1; k < 100; k = k + 1) begin : gen_out_different\n\t\tassign out_different[k] = in[k] ^ in[k-1];\n\tend\nendgenerate\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
{"task_id": "m2014_q4a", "completion": "always_latch\nbegin\n\tif (ena)\n\t\tq <= d;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "mux256to1v", "completion": "assign out = in[sel*4 +: 4];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "mux9to1v", "completion": "always_comb begin\n\tcase (sel)\n\t\t4'b0000: out = a;\n\t\t4'b0001: out = b;\n\t\t4'b0010: out = c;\n\t\t4'b0011: out = d;\n\t\t4'b0100: out = e;\n\t\t4'b0101: out = f;\n\t\t4'b0110: out = g;\n\t\t4'b0111: out = h;\n\t\t4'b1000: out = i;\n\t\tdefault: out = 16'hFFFF;\n\tendcase\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "vectorgates", "completion": "assign out_or_bitwise = a | b;\nassign out_or_logical = (a != 0) | (b != 0);\nassign out_not = {~b, ~a};\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm3onehot", "completion": "always @(*) begin\n\tcase (state)\n\t\t4'b0001: begin // State A\n\t\t\tnext_state = in ? 4'b0010 : 4'b0001; // Next state in=1: B, Next state in=0: A\n\t\tend\n\t\t4'b0010: begin // State B\n\t\t\tnext_state = in ? 4'b0010 : 4'b0100; // Next state in=1: B, Next state in=0: C\n\t\tend\n\t\t4'b0100: begin // State C\n\t\t\tnext_state = in ? 4'b1000 : 4'b0001; // Next state in=1: D, Next state in=0: A\n\t\tend\n\t\t4'b1000: begin // State D\n\t\t\tnext_state = in ? 4'b0100 : 4'b0010; // Next state in=1: C, Next state in=0: B\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = 4'b0001; // Default to state A\n\t\tend\n\tendcase\nend\n\nassign out = (state == 4'b1000) ? 1'b1 : 1'b0; // Output is 1 when in state D, 0 otherwise\n\nendmodule\n", "result": "failed: 360 out of 600 samples.", "passed": false}
{"task_id": "conditional", "completion": "always @(*) begin\n\tmin = a;\n\tif (b < min) min = b;\n\tif (c < min) min = c;\n\tif (d < min) min = d;\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "gates", "completion": "assign out_and = a & b;\nassign out_or = a | b;\nassign out_xor = a ^ b;\nassign out_nand = ~(a & b);\nassign out_nor = ~(a | b);\nassign out_xnor = ~(a ^ b);\nassign out_anotb = a & ~b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "kmap2", "completion": "assign out = (a & ~b & ~c & d) | (a & ~b & c & ~d) | (~a & b & c & d) | (a & b & ~c & d);\n\nendmodule\n", "result": "failed: 137 out of 232 samples.", "passed": false}
{"task_id": "2014_q3fsm", "completion": "reg [1:0] state;\nparameter A = 2'b00, B = 2'b01, C = 2'b10, D = 2'b11;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= A;\n\t\tz <= 0;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tA: begin\n\t\t\t\tif (s) begin\n\t\t\t\t\tstate <= B;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= A;\n\t\t\t\tend\n\t\t\tend\n\t\t\tB: begin\n\t\t\t\tstate <= C;\n\t\t\tend\n\t\t\tC: begin\n\t\t\t\tstate <= D;\n\t\t\tend\n\t\t\tD: begin\n\t\t\t\tif (w) begin\n\t\t\t\t\tz <= 1;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tz <= 0;\n\t\t\t\tend\n\t\t\t\tstate <= B;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule\n", "result": "failed: 551 out of 1414 samples.", "passed": false}
{"task_id": "vector4", "completion": "assign out = {{24{in[7]}}, in};\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4k", "completion": "reg [3:0] shift_reg;\n\nalways @(posedge clk) begin\n\tif (!resetn) begin\n\t\tshift_reg <= 4'b0000;\n\tend else begin\n\t\tshift_reg <= {shift_reg[2:0], in};\n\tend\nend\n\nassign out = shift_reg[3];\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_case2", "completion": "always @(*) begin\n\tcase (in)\n\t\t4'b0001: pos = 2'd0;\n\t\t4'b001x: pos = 2'd1;\n\t\t4'b01xx: pos = 2'd2;\n\t\t4'b1xxx: pos = 2'd3;\n\t\tdefault: pos = 2'd0;\n\tendcase\nend\n\nendmodule\n", "result": "failed: 38 out of 94 samples.", "passed": false}
{"task_id": "fsm2", "completion": "reg state;\nparameter OFF = 1'b0, ON = 1'b1;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= OFF;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tOFF: begin\n\t\t\t\tif (j) begin\n\t\t\t\t\tstate <= ON;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= OFF;\n\t\t\t\tend\n\t\t\tend\n\t\t\tON: begin\n\t\t\t\tif (k) begin\n\t\t\t\t\tstate <= OFF;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= ON;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out = state;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4i", "completion": "assign out = 1'b0;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "step_one", "completion": "assign one = 1'b1;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "vector100r", "completion": "always @(*) begin\n\tfor (int i = 0; i < 100; i++) begin\n\t\tout[i] = in[99-i];\n\tend\nend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4d", "completion": "logic xor_out;\n\nalways_ff @(posedge clk) begin\n\txor_out <= in ^ out;\n\tout <= xor_out;\nend\n\nendmodule\n", "result": "failed: 1 out of 100 samples.", "passed": false}
{"task_id": "shift4", "completion": "\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\tq <= 4'b0000;\n\t\tend\n\t\telse if (load) begin\n\t\t\tq <= data;\n\t\tend\n\t\telse if (ena) begin\n\t\t\tq <= {1'b0, q[3:1]};\n\t\tend\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "truthtable1", "completion": "assign f = (x3 & ~x2 & ~x1) | (~x3 & x2 & x1) | (x3 & x2 & ~x1) | (x3 & x2 & x1);\n\nendmodule\n", "result": "failed: 8 out of 58 samples.", "passed": false}
{"task_id": "dff8ar", "completion": "\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\tq <= d;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "gates100", "completion": "// 100-input AND gate\nassign out_and = &in;\n\n// 100-input OR gate\nassign out_or = |in;\n\n// 100-input XOR gate\nassign out_xor = ^in;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "hadd", "completion": "assign sum = a ^ b;\nassign cout = a & b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "always_if2", "completion": "\talways @(*) begin\n\t\tif (cpu_overheated)\n\t\t\tshut_off_computer = 1;\n\t\telse\n\t\t\tshut_off_computer = 0;\n\tend\n\n\talways @(*) begin\n\t\tif (~arrived)\n\t\t\tkeep_driving = ~gas_tank_empty;\n\t\telse\n\t\t\tkeep_driving = 0;\n\tend\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm2s", "completion": "reg state;\nparameter OFF = 1'b0, ON = 1'b1;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= OFF;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tOFF: begin\n\t\t\t\tif (j) begin\n\t\t\t\t\tstate <= ON;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= OFF;\n\t\t\t\tend\n\t\t\tend\n\t\t\tON: begin\n\t\t\t\tif (k) begin\n\t\t\t\t\tstate <= OFF;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= ON;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out = state;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "vector3", "completion": "wire [29:0] concat_in;\nassign concat_in = {a, b, c, d, e, f, 2'b11};\n\nassign w = concat_in[29:22];\nassign x = concat_in[21:14];\nassign y = concat_in[13:6];\nassign z = concat_in[5:0];\n\nendmodule\n", "result": "failed: 115 out of 126 samples.", "passed": false}
{"task_id": "circuit2", "completion": "assign q = (a & b & c & d) | (~a & ~b & ~c & ~d);\n\nendmodule\n", "result": "failed: 49 out of 121 samples.", "passed": false}
{"task_id": "andgate", "completion": "assign out = a & b;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fsm1s", "completion": "reg state;\nparameter B = 1'b0, A = 1'b1;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= B;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tB: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\tstate <= B;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= A;\n\t\t\t\tend\n\t\t\tend\n\t\t\tA: begin\n\t\t\t\tif (in) begin\n\t\t\t\t\tstate <= A;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= B;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nassign out = (state == B) ? 1'b1 : 1'b0;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "fadd", "completion": "wire s1, c1, c2;\n\n// Half Adder for a and b\nassign s1 = a ^ b;\nassign c1 = a & b;\n\n// Half Adder for s1 and cin\nassign sum = s1 ^ cin;\nassign c2 = s1 & cin;\n\n// Carry out\nassign cout = c1 | c2;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "m2014_q4g", "completion": "\tlogic xnor_out;\n\n\tassign xnor_out = ~(in1 ^ in2);\n\tassign out = xnor_out ^ in3;\n\nendmodule\n", "result": "passed", "passed": true}
{"task_id": "ece241_2014_q3", "completion": "assign mux_in[0] = (c & ~d);\nassign mux_in[1] = (c & d);\nassign mux_in[2] = (c & d);\nassign mux_in[3] = (c & ~d);\n\nendmodule\n", "result": "failed: 60 out of 60 samples.", "passed": false}
{"task_id": "ece241_2014_q5b", "completion": "reg [1:0] state, next_state;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset)\n\t\tstate <= 2'b00;\n\telse\n\t\tstate <= next_state;\nend\n\nalways @(*) begin\n\tcase (state)\n\t\t2'b00: begin // State A\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state = 2'b00; // Stay in A\n\t\t\telse\n\t\t\t\tnext_state = 2'b01; // Go to B\n\t\tend\n\t\t2'b01: begin // State B\n\t\t\tif (x == 1'b0)\n\t\t\t\tnext_state = 2'b01; // Stay in B\n\t\t\telse\n\t\t\t\tnext_state = 2'b00; // Go to A\n\t\tend\n\t\tdefault:\n\t\t\tnext_state = 2'b00; // Default to state A\n\tendcase\nend\n\nassign z = (state == 2'b01) ? 1'b1 : 1'b0; // Output z based on current state\n\nendmodule\n", "result": "failed: 209 out of 436 samples.", "passed": false}
{"task_id": "circuit10", "completion": "reg state_reg;\n\nalways @(posedge clk) begin\n\tif (a & b) begin\n\t\tstate_reg <= 1'b1;\n\tend else if (~a & ~b) begin\n\t\tstate_reg <= 1'b0;\n\tend\nend\n\nassign state = state_reg;\nassign q = state_reg;\n\nendmodule\n", "result": "failed: 14 out of 232 samples.", "passed": false}
{"task_id": "2012_q1g", "completion": "always_comb begin\n\tcase ({x[4], x[3], x[2], x[1]})\n\t\t4'b0000: f = 1'b1;\n\t\t4'b0001: f = 1'b0;\n\t\t4'b0011: f = 1'b1;\n\t\t4'b0010: f = 1'b1;\n\t\t4'b0100: f = 1'b0;\n\t\t4'b0101: f = 1'b0;\n\t\t4'b0111: f = 1'b1;\n\t\t4'b0110: f = 1'b0;\n\t\t4'b1100: f = 1'b1;\n\t\t4'b1101: f = 1'b1;\n\t\t4'b1111: f = 1'b1;\n\t\t4'b1110: f = 1'b0;\n\tendcase\nend\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
{"task_id": "fsm_hdlc", "completion": "\t// Define the states\n\tlocalparam IDLE = 3'd0;\n\tlocalparam FIND_FLAG = 3'd1;\n\tlocalparam FIND_DISC = 3'd2;\n\tlocalparam FIND_ERR = 3'd3;\n\n\t// Register the current state\n\treg [2:0] state;\n\n\t// Register the count of consecutive 1s\n\treg [2:0] count;\n\n\t// Register the output signals\n\treg disc_reg;\n\treg flag_reg;\n\treg err_reg;\n\n\t// Combinational logic\n\talways @(*) begin\n\t\tdisc_reg = 1'b0;\n\t\tflag_reg = 1'b0;\n\t\terr_reg = 1'b0;\n\n\t\tcase (state)\n\t\t\tIDLE: begin\n\t\t\t\tif (in == 1'b1) begin\n\t\t\t\t\tstate = FIND_FLAG;\n\t\t\t\t\tcount = 3'd1;\n\t\t\t\tend else begin\n\t\t\t\t\tstate = IDLE;\n\t\t\t\t\tcount = 3'd0;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFIND_FLAG: begin\n\t\t\t\tif (in == 1'b1) begin\n\t\t\t\t\tcount = count + 3'd1;\n\t\t\t\t\tif (count == 3'd6) begin\n\t\t\t\t\t\tstate = FIND_DISC;\n\t\t\t\t\t\tflag_reg = 1'b1;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tstate = FIND_FLAG;\n\t\t\t\t\tend\n\t\t\t\tend else begin\n\t\t\t\t\tstate = IDLE;\n\t\t\t\t\tcount = 3'd0;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFIND_DISC: begin\n\t\t\t\tif (in == 1'b0) begin\n\t\t\t\t\tstate = IDLE;\n\t\t\t\t\tdisc_reg = 1'b1;\n\t\t\t\tend else begin\n\t\t\t\t\tstate = FIND_ERR;\n\t\t\t\t\tcount = 3'd1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFIND_ERR: begin\n\t\t\t\tif (in == 1'b1) begin\n\t\t\t\t\tcount = count + 3'd1;\n\t\t\t\t\tif (count == 3'd7) begin\n\t\t\t\t\t\tstate = IDLE;\n\t\t\t\t\t\terr_reg = 1'b1;\n\t\t\t\t\tend else begin\n\t\t\t\t\t\tstate = FIND_ERR;\n\t\t\t\t\tend\n\t\t\t\tend else begin\n\t\t\t\t\tstate = IDLE;\n\t\t\t\t\tcount = 3'd0;\n\t\t\t\tend\n\t\t\tend\n\t\t\tdefault: begin\n\t\t\t\tstate = IDLE;\n\t\t\t\tcount = 3'd0;\n\t\t\tend\n\t\tendcase\n\tend\n\n\t// Sequential logic\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tstate <= IDLE;\n\t\t\tcount <= 3'd0;\n\t\t\tdisc_reg <= 1'b0;\n\t\t\tflag_reg <= 1'b0;\n\t\t\terr_reg <= 1'b0;\n\t\tend else begin\n\t\t\tstate <= state;\n\t\t\tcount <= count;\n\t\t\tdisc_reg <= disc_reg;\n\t\t\tflag_reg <= flag_reg;\n\t\t\terr_reg <= err_reg;\n\t\tend\n\tend\n\n\t// Output assignments\n\tassign disc = disc_reg;\n\tassign flag = flag_reg;\n\tassign err = err_reg;\n\nendmodule\n", "result": "failed: 224 out of 801 samples.", "passed": false}
{"task_id": "review2015_fancytimer", "completion": "    reg [3:0] delay;\n    reg [11:0] timer;\n    reg [2:0] state;\n\n    localparam IDLE = 3'b000;\n    localparam START = 3'b001;\n    localparam SHIFT = 3'b010;\n    localparam COUNT = 3'b011;\n    localparam DONE = 3'b100;\n\n    always @(posedge clk) begin\n        if (reset) begin\n            state <= IDLE;\n            counting <= 0;\n            done <= 0;\n            delay <= 0;\n            timer <= 0;\n        end else begin\n            case (state)\n                IDLE: begin\n                    if (data == 1'b1 && data == 1'b1 && data == 1'b0 && data == 1'b1) begin\n                        state <= START;\n                    end\n                end\n                START: begin\n                    state <= SHIFT;\n                end\n                SHIFT: begin\n                    delay <= {delay[2:0], data};\n                    state <= COUNT;\n                end\n                COUNT: begin\n                    if (timer == 0) begin\n                        if (delay == 0) begin\n                            state <= DONE;\n                            counting <= 0;\n                            done <= 1;\n                        end else begin\n                            delay <= delay - 1;\n                            timer <= 1000;\n                            counting <= 1;\n                        end\n                    end else begin\n                        timer <= timer - 1;\n                    end\n                end\n                DONE: begin\n                    if (ack) begin\n                        state <= IDLE;\n                        counting <= 0;\n                        done <= 0;\n                    end\n                end\n            endcase\n        end\n    end\n\n    assign count = (state == COUNT) ? delay : 4'bxxxx;\n\nendmodule\n", "result": "failed: 234318 out of 235447 samples.", "passed": false}
{"task_id": "ece241_2013_q4", "completion": "reg [1:0] state;\nparameter LOW = 2'b00, MID = 2'b01, HIGH = 2'b10, FULL = 2'b11;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= LOW;\n\t\tfr3 <= 1'b1;\n\t\tfr2 <= 1'b1;\n\t\tfr1 <= 1'b1;\n\t\tdfr <= 1'b1;\n\tend\n\telse begin\n\t\tcase (state)\n\t\t\tLOW: begin\n\t\t\t\tif (s[3]) begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b0;\n\t\t\t\t\tfr1 <= 1'b0;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[2]) begin\n\t\t\t\t\tstate <= MID;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[1]) begin\n\t\t\t\t\tstate <= HIGH;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b1;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tMID: begin\n\t\t\t\tif (s[3]) begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b0;\n\t\t\t\t\tfr1 <= 1'b0;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[2]) begin\n\t\t\t\t\tstate <= MID;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[1]) begin\n\t\t\t\t\tstate <= HIGH;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b1;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tHIGH: begin\n\t\t\t\tif (s[3]) begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b0;\n\t\t\t\t\tfr1 <= 1'b0;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[2]) begin\n\t\t\t\t\tstate <= MID;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b0;\n\t\t\t\tend\n\t\t\t\telse if (s[1]) begin\n\t\t\t\t\tstate <= HIGH;\n\t\t\t\t\tfr3 <= 1'b0;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\t\telse begin\n\t\t\t\t\tstate <= LOW;\n\t\t\t\t\tfr3 <= 1'b1;\n\t\t\t\t\tfr2 <= 1'b1;\n\t\t\t\t\tfr1 <= 1'b1;\n\t\t\t\t\tdfr <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFULL: begin\n\t\t\t\tstate <= FULL;\n\t\t\t\tfr3 <= 1'b1;\n\t\t\t\tfr2 <= 1'b1;\n\t\t\t\tfr1 <= 1'b1;\n\t\t\t\tdfr <= 1'b1;\n\t\t\tend\n\t\tendcase\n\tend\nend\n\nendmodule\n", "result": "failed: 853 out of 2040 samples.", "passed": false}
{"task_id": "fsm_serial", "completion": "localparam IDLE = 0, START = 1, DATA = 2, STOP = 3;\nreg [1:0] state, next_state;\nreg [2:0] bit_count;\n\nalways @(posedge clk) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tbit_count <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tif (state == DATA)\n\t\t\tbit_count <= bit_count + 1;\n\t\telse\n\t\t\tbit_count <= 0;\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in == 0)\n\t\t\t\tnext_state = START;\n\t\t\telse\n\t\t\t\tnext_state = IDLE;\n\t\tend\n\t\tSTART: begin\n\t\t\tif (bit_count == 7)\n\t\t\t\tnext_state = DATA;\n\t\t\telse\n\t\t\t\tnext_state = START;\n\t\tend\n\t\tDATA: begin\n\t\t\tif (bit_count == 7)\n\t\t\t\tnext_state = STOP;\n\t\t\telse\n\t\t\t\tnext_state = DATA;\n\t\tend\n\t\tSTOP: begin\n\t\t\tif (in == 1)\n\t\t\t\tnext_state = IDLE;\n\t\t\telse\n\t\t\t\tnext_state = STOP;\n\t\tend\n\t\tdefault: next_state = IDLE;\n\tendcase\nend\n\nassign done = (state == STOP) && (in == 1);\n\nendmodule\n", "result": "failed: 38 out of 905 samples.", "passed": false}
{"task_id": "fsm_serialdata", "completion": "reg [2:0] state;\nreg [2:0] next_state;\nreg [7:0] data_byte;\nreg [3:0] bit_count;\n\nlocalparam IDLE = 3'b000;\nlocalparam START = 3'b001;\nlocalparam DATA = 3'b010;\nlocalparam STOP = 3'b011;\nlocalparam DONE = 3'b100;\n\nalways @(posedge clk or posedge reset) begin\n\tif (reset) begin\n\t\tstate <= IDLE;\n\t\tbit_count <= 0;\n\t\tdata_byte <= 0;\n\tend\n\telse begin\n\t\tstate <= next_state;\n\t\tif (state == DATA) begin\n\t\t\tdata_byte <= {in, data_byte[7:1]};\n\t\t\tbit_count <= bit_count + 1;\n\t\tend\n\t\telse if (state == STOP) begin\n\t\t\tbit_count <= 0;\n\t\tend\n\tend\nend\n\nalways @(*) begin\n\tcase (state)\n\t\tIDLE: begin\n\t\t\tif (in == 0) begin\n\t\t\t\tnext_state = START;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tSTART: begin\n\t\t\tnext_state = DATA;\n\t\tend\n\t\tDATA: begin\n\t\t\tif (bit_count == 7) begin\n\t\t\t\tnext_state = STOP;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = DATA;\n\t\t\tend\n\t\tend\n\t\tSTOP: begin\n\t\t\tif (in == 1) begin\n\t\t\t\tnext_state = DONE;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tnext_state = IDLE;\n\t\t\tend\n\t\tend\n\t\tDONE: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\t\tdefault: begin\n\t\t\tnext_state = IDLE;\n\t\tend\n\tendcase\nend\n\nassign out_byte = data_byte;\nassign done = (state == DONE);\n\nendmodule\n", "result": "failed: 61 out of 905 samples.", "passed": false}
{"task_id": "gshare", "completion": "reg [6:0] global_history;\nreg [6:0] pht [127:0];\n\nwire [6:0] index = global_history ^ predict_pc;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tglobal_history <= 7'b0;\n\tend else begin\n\t\tif (predict_valid) begin\n\t\t\tglobal_history <= {global_history[5:0], predict_taken};\n\t\tend\n\t\tif (train_valid) begin\n\t\t\tglobal_history <= {global_history[5:0], train_taken};\n\t\t\tpht[index] <= (train_mispredicted) ? 2'b00 : (pht[index] == 2'b11) ? 2'b11 : pht[index] + 1'b1;\n\t\tend\n\tend\nend\n\nassign predict_taken = pht[index][1];\nassign predict_history = global_history;\n\nendmodule\n", "result": "failed: 605 out of 1083 samples.", "passed": false}
{"task_id": "lemmings4", "completion": "\tlocalparam IDLE = 2'b00;\n\tlocalparam WALK_LEFT = 2'b01;\n\tlocalparam WALK_RIGHT = 2'b10;\n\tlocalparam FALL = 2'b11;\n\n\treg [1:0] state, next_state;\n\treg [4:0] fall_count;\n\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) begin\n\t\t\tstate <= IDLE;\n\t\t\tfall_count <= 0;\n\t\tend\n\t\telse begin\n\t\t\tstate <= next_state;\n\t\t\tif (state == FALL) begin\n\t\t\t\tfall_count <= fall_count + 1;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tfall_count <= 0;\n\t\t\tend\n\t\tend\n\tend\n\n\talways @(*) begin\n\t\tnext_state = state;\n\t\tcase (state)\n\t\t\tIDLE: begin\n\t\t\t\tif (dig) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\t\telse if (bump_left) begin\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\tend\n\t\t\t\telse if (bump_right) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\tend\n\t\t\tWALK_LEFT: begin\n\t\t\t\tif (bump_left) begin\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\tend\n\t\t\t\telse if (bump_right) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\t\telse if (dig && ground) begin\n\t\t\t\t\tnext_state = DIG;\n\t\t\t\tend\n\t\t\t\telse if (!ground) begin\n\t\t\t\t\tnext_state = FALL;\n\t\t\t\tend\n\t\t\tend\n\t\t\tWALK_RIGHT: begin\n\t\t\t\tif (bump_right) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\t\telse if (bump_left) begin\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\tend\n\t\t\t\telse if (dig && ground) begin\n\t\t\t\t\tnext_state = DIG;\n\t\t\t\tend\n\t\t\t\telse if (!ground) begin\n\t\t\t\t\tnext_state = FALL;\n\t\t\t\tend\n\t\t\tend\n\t\t\tFALL: begin\n\t\t\t\tif (ground) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\t\telse if (fall_count >= 20) begin\n\t\t\t\t\tnext_state = IDLE;\n\t\t\t\tend\n\t\t\tend\n\t\t\tDIG: begin\n\t\t\t\tif (!ground) begin\n\t\t\t\t\tnext_state = FALL;\n\t\t\t\tend\n\t\t\t\telse if (bump_left || bump_right) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\tend\n\t\tendcase\n\tend\n\n\tassign walk_left = (state == WALK_LEFT);\n\tassign walk_right = (state == WALK_RIGHT);\n\tassign aaah = (state == FALL);\n\tassign digging = (state == DIG);\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
{"task_id": "review2015_fsm", "completion": "    localparam IDLE = 0, SHIFT = 1, WAIT = 2, TIMEOUT = 3;\n    reg [1:0] state, next_state;\n    reg [3:0] pattern;\n\n    always @(posedge clk or posedge reset) begin\n        if (reset) begin\n            state <= IDLE;\n            pattern <= 0;\n        end\n        else begin\n            state <= next_state;\n            if (state == SHIFT) begin\n                pattern <= {pattern[2:0], data};\n            end\n        end\n    end\n\n    always @(*) begin\n        next_state = state;\n        shift_ena = 0;\n        counting = 0;\n        done = 0;\n        case (state)\n            IDLE: begin\n                if (pattern == 4'b1101) begin\n                    next_state = SHIFT;\n                end\n            end\n            SHIFT: begin\n                shift_ena = 1;\n                if (pattern == 4'b1101) begin\n                    next_state = WAIT;\n                end\n            end\n            WAIT: begin\n                counting = 1;\n                if (done_counting) begin\n                    next_state = TIMEOUT;\n                end\n            end\n            TIMEOUT: begin\n                done = 1;\n                if (ack) begin\n                    next_state = IDLE;\n                    pattern = 0;\n                end\n            end\n        endcase\n    end\n\nendmodule\n", "result": "failed: 4152 out of 5069 samples.", "passed": false}
{"task_id": "conwaylife", "completion": "\treg [255:0] next_q;\n\treg [3:0] i, j;\n\treg [3:0] count;\n\n\talways @(posedge clk) begin\n\t\tif (load) begin\n\t\t\tq <= data;\n\t\tend\n\t\telse begin\n\t\t\tq <= next_q;\n\t\tend\n\tend\n\n\talways @(*) begin\n\t\tnext_q = q;\n\t\tfor (i = 0; i < 16; i = i + 1) begin\n\t\t\tfor (j = 0; j < 16; j = j + 1) begin\n\t\t\t\tcount = 0;\n\t\t\t\tif (q[((i+15)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+14)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+13)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+12)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+11)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+10)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+9)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[((i+8)%16)*16+j]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+15)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+14)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+13)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+12)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+11)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+10)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+9)%16)]) count = count + 1;\n\t\t\t\tif (q[i*16+((j+8)%16)]) count = count + 1;\n\t\t\t\tif (count == 2) next_q[i*16+j] = q[i*16+j];\n\t\t\t\telse if (count == 3) next_q[i*16+j] = 1;\n\t\t\t\telse next_q[i*16+j] = 0;\n\t\t\tend\n\t\tend\n\tend\n\nendmodule\n", "result": "timed out", "passed": false}
{"task_id": "lemmings3", "completion": "reg [1:0] state, next_state;\nparameter WALK_LEFT = 2'b00, WALK_RIGHT = 2'b01, FALL = 2'b10, DIG = 2'b11;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tcase (state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\tend else if (bump_right) begin\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALL;\n\t\t\tend else if (dig) begin\n\t\t\t\tnext_state = DIG;\n\t\t\tend\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (bump_right) begin\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\tend else if (bump_left) begin\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALL;\n\t\t\tend else if (dig) begin\n\t\t\t\tnext_state = DIG;\n\t\t\tend\n\t\tend\n\t\tFALL: begin\n\t\t\tif (ground) begin\n\t\t\t\tnext_state = (bump_left || bump_right) ? WALK_LEFT : WALK_RIGHT;\n\t\t\tend\n\t\tend\n\t\tDIG: begin\n\t\t\tif (!ground) begin\n\t\t\t\tnext_state = FALL;\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALL);\nassign digging = (state == DIG);\n\nendmodule\n", "result": "failed: 84 out of 443 samples.", "passed": false}
{"task_id": "count_clock", "completion": "\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\thh <= 8'd12;\n\t\t\tmm <= 8'd0;\n\t\t\tss <= 8'd0;\n\t\t\tpm <= 1'b0;\n\t\tend\n\t\telse if (ena) begin\n\t\t\tss <= (ss == 8'd59) ? 8'd0 : ss + 8'd1;\n\t\t\tif (ss == 8'd59) begin\n\t\t\t\tmm <= (mm == 8'd59) ? 8'd0 : mm + 8'd1;\n\t\t\t\tif (mm == 8'd59) begin\n\t\t\t\t\thh <= (hh == 8'd12) ? ((pm) ? 8'd1 : 8'd13) : hh + 8'd1;\n\t\t\t\t\tpm <= (hh == 8'd12) ? ~pm : pm;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nendmodule\n", "result": "failed: 352412 out of 352413 samples.", "passed": false}
{"task_id": "lemmings2", "completion": "reg [1:0] state, next_state;\n\nlocalparam WALK_LEFT = 2'b00;\nlocalparam WALK_RIGHT = 2'b01;\nlocalparam FALL = 2'b10;\n\nalways @(posedge clk or posedge areset) begin\n\tif (areset) begin\n\t\tstate <= WALK_LEFT;\n\tend else begin\n\t\tstate <= next_state;\n\tend\nend\n\nalways @(*) begin\n\tnext_state = state;\n\tcase (state)\n\t\tWALK_LEFT: begin\n\t\t\tif (bump_left) begin\n\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALL;\n\t\t\tend\n\t\tend\n\t\tWALK_RIGHT: begin\n\t\t\tif (bump_right) begin\n\t\t\t\tnext_state = WALK_LEFT;\n\t\t\tend else if (!ground) begin\n\t\t\t\tnext_state = FALL;\n\t\t\tend\n\t\tend\n\t\tFALL: begin\n\t\t\tif (ground) begin\n\t\t\t\tif (bump_left) begin\n\t\t\t\t\tnext_state = WALK_RIGHT;\n\t\t\t\tend else if (bump_right) begin\n\t\t\t\t\tnext_state = WALK_LEFT;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tendcase\nend\n\nassign walk_left = (state == WALK_LEFT);\nassign walk_right = (state == WALK_RIGHT);\nassign aaah = (state == FALL);\n\nendmodule\n", "result": "failed: 50 out of 441 samples.", "passed": false}
{"task_id": "countbcd", "completion": "\treg [3:0] ones, tens, hundreds, thousands;\n\n\talways @(posedge clk) begin\n\t\tif (reset) begin\n\t\t\tones <= 0;\n\t\t\ttens <= 0;\n\t\t\thundreds <= 0;\n\t\t\tthousands <= 0;\n\t\tend\n\t\telse begin\n\t\t\tif (ones == 9) begin\n\t\t\t\tones <= 0;\n\t\t\t\tena[1] <= 1;\n\t\t\tend\n\t\t\telse begin\n\t\t\t\tones <= ones + 1;\n\t\t\t\tena[1] <= 0;\n\t\t\tend\n\n\t\t\tif (tens == 9 && ena[1]) begin\n\t\t\t\ttens <= 0;\n\t\t\t\tena[2] <= 1;\n\t\t\tend\n\t\t\telse if (ena[1]) begin\n\t\t\t\ttens <= tens + 1;\n\t\t\t\tena[2] <= 0;\n\t\t\tend\n\n\t\t\tif (hundreds == 9 && ena[2]) begin\n\t\t\t\thundreds <= 0;\n\t\t\t\tena[3] <= 1;\n\t\t\tend\n\t\t\telse if (ena[2]) begin\n\t\t\t\thundreds <= hundreds + 1;\n\t\t\t\tena[3] <= 0;\n\t\t\tend\n\n\t\t\tif (thousands == 9 && ena[3]) begin\n\t\t\t\tthousands <= 0;\n\t\t\tend\n\t\t\telse if (ena[3]) begin\n\t\t\t\tthousands <= thousands + 1;\n\t\t\tend\n\t\tend\n\tend\n\n\talways @(*) begin\n\t\tq[3:0] = ones;\n\t\tq[7:4] = tens;\n\t\tq[11:8] = hundreds;\n\t\tq[15:12] = thousands;\n\tend\n\nendmodule\n", "result": "failed: compile error.", "passed": false}
